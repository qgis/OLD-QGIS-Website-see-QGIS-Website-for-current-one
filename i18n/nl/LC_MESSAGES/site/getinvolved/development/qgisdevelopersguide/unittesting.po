# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, QGIS Contributors
# This file is distributed under the same license as the QGIS package.
# 
# Translators:
# DiGro, 2016
msgid ""
msgstr ""
"Project-Id-Version: QGIS Website\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-11 18:41+0200\n"
"PO-Revision-Date: 2016-03-05 14:48+0000\n"
"Last-Translator: DiGro, 2016\n"
"Language-Team: Dutch (http://www.transifex.com/qgis/qgis-website/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:5
msgid "Unit Testing"
msgstr "Testen van eenheden"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:7
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement to "
"qgis_core, and we will extend this requirement to other parts of the code "
"base once people are familiar with the procedures for unit testing explained"
" in the sections that follow."
msgstr "vanaf november 2007 vereisen we dat alle nieuwe mogelijkheden die in master gaan worden vergezeld door een test van eenheden. Initieel hadden we deze eis beperkt tot qgis_core, en we zullen deze eis uitbreiden naar andere delen van de codebasis als mensen eenmaal bekend zijn met de procedures voor het testen van eenheden, uitgelegd in de gedeelten die volgen."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:15
msgid "The QGIS testing framework - an overview"
msgstr "Het test framework  voor QGIS - een overzicht"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:17
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt testing "
"library) and CTest (a framework for compiling and running tests as part of "
"the CMake build process). Lets take an overview of the process before I "
"delve into the details:"
msgstr "Testen van eenheden wordt uitgevoerd met behulp van een combinatie van QTestLib (de testbibliotheek van Qt) en CTest (een framework voor het compileren en uitvoeren van testen als deel van het CMake buildproces). Laten we eens naar een overzicht van het proces kijken, voordat ik dieper op de details inga:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:22
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written yet "
"when you start building your tests, and then as you implement your code you "
"can immediately validate each new functional part you add with your test. In"
" practive you will probably need to write tests for pre-existing code in "
"QGIS since we are starting with a testing framework well after much "
"application logic has already been implemented."
msgstr "Er is enige code die u wilt testen, bijv. een klasse of functie. Extreme experts van programmeren stellen voor dat de code nog niet zou moeten zijn geschreven wanneer u begint met het bouwen van uw tests, en dan, als u uw code implementeert, kunt u onmiddellijk elk nieuw functionele gedeelte dat u toevoegt kunnen valideren met uw test. In de praktijk dient u waarschijnlijk testen te schrijven voor reeds bestaande code in QGIS omdat we met een test framework beginnen ruim nadat veel logica voor de toepassing al is geïmplementeerd."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:30
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically a "
"client that creates an instance of a class and calls some methods on that "
"class. It will check the return from each method to make sure it matches the"
" expected value. If any one of the calls fails, the unit will fail."
msgstr "U maakt een test voor eenheden. Dit gebeurt onder ``<QGIS Source Dir>/tests/src/core`` in het geval van de core lib. De test is in de basis een cliënt die een instantie van ene klasse maakt en enkele methoden van die klasse aanroept. Het zal de teruggave voor elke methoden controleren om er voor te zorgen dat het overeenkomt met de verwachte waarde. Als één van de aanroepen mislukt, zal de eenheid mislukken."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:36
msgid ""
"You include QtTestLib macros in your test class. This macro is processed by "
"the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr "U neemt macro's van QtTestLib op in uw testklasse. Deze macro wordt verwerkt door de Qt meta object compiler (moc) en breidt uw testklasse uit naar een uitvoerbare toepassing."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:40
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will "
"build your test."
msgstr "U voegt een gedeelte toe aan CMakeLists.txt in uw map met testen die uw test zal bouwen."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:43
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. This "
"will ensure your tests actually get compiled when you type make."
msgstr "Zorg er voor dat u ``ENABLE_TESTING`` heeft ingeschakeld in ccmake / cmakesetup. Dat zal er voor zorgen dat uw testen in feite worden gecompileerd als u make typt."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:46
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if your"
" test is data driven (e.g. needs to load a shapefile). These test data "
"should be as small as possible and wherever possible you should use the "
"existing datasets already there. Your tests should never modify this data in"
" situ, but rather may a temporary copy somewhere if needed."
msgstr "U voegt optioneel testgegevens toe aan ``<QGIS Source Dir>/tests/testdata`` als uw test aangedreven wordt door gegevens (bijv. dient een shapefile te laden). Deze testgegevens zouden zo klein mogelijk moeten zijn en waar mogelijk zou u de reeds daar aanwezige gegevens moeten gebruiken. Uw testen zouden nooit die gegevens in situ moeten aanpassen, maar in plaats daarvan een tijdelijke kopie moeten maken, indien nodig."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:52
msgid ""
"You compile your sources and install. Do this using normal ``make && (sudo)"
"  make install`` procedure."
msgstr "U compileert uw bronnen en installeert. Doe dit met behulp van de normale procedure ``make && (sudo)  make install``."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:55
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though I will explain other aproaches that "
"offer more fine grained control over running tests."
msgstr "U voert uw testen uit. Dit wordt normaal gesproken eenvoudig gedaan door ``make test``  te doen na de stap ``make install``, hoewel ik wel andere benaderingen uitleg die meer fijnmazige controle over het uitvoeren van testen bieden."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:60
msgid ""
"Right with that overview in mind, I will delve into a bit of detail. I've "
"already done much of the configuration for you in CMake and other places in "
"the source tree so all you need to do are the easy bits - writing unit "
"tests!"
msgstr "Met dat overzicht in gedachten zal ik een beetje meer ingaan op de details. Ik heb al veel van de configuratie voor u gedaan in CMake en op andere plaatsen in de boom van de bron, dus alles wat u nog zou moeten doen zijn de eenvoudige gedeelten - testen voor eenheden schrijven!"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:66
msgid "Creating a unit test"
msgstr "Een test voor eenheden maken"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:68
msgid ""
"Creating a unit test is easy - typically you will do this by just creating a"
" single .cpp file (not .h file is used) and implement all your test methods "
"as public methods that return void. I'll use a simple test class for "
"QgsRasterLayer throughout the section that follows to illustrate. By "
"convention we will name our test with the same name as the class they are "
"testing but prefixed with 'Test'. So our test implementation goes in a file "
"called testqgsrasterlayer.cpp and the class itself will be "
"TestQgsRasterLayer. First we add our standard copyright banner:"
msgstr "Het maken van een test voor eenheden is eenvoudig - gewoonlijk zult u dit doen door één enkel .cpp-bestand te maken (er wordt geen .h-bestand gebruikt) en implementeer al uw testmethoden als publieke methoden die void teruggeven. Ik gebruik, ter illustratie, een eenvoudige testklasse voor QgsRasterLayer in het gedeelte dat hierop volgt. Volgens conventie zullen we onze test dezelfde naam geven als de klasse die getest wordt, maar met het voorvoegsel 'Test'. Dus onze test-implementatie gaat in een bestand genaamd testqgsrasterlayer.cpp en de klasse zelf zal zijn TestQgsRasterLayer. Eerst voegen we onze standaard banner voor auteursrechten toe:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:94
msgid ""
"Next we use start our includes needed for the tests we plan to run. There is"
" one special include all tests should have:"
msgstr "Vervolgens beginnen we met het starten van onze includes die nodig zijn voor de testen die we willen uitvoeren. Er is één speciale include die  alle testen zouden moeten hebben:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:101
msgid ""
"Beyond that you just continue implementing your class as per normal, pulling"
" in whatever headers you may need:"
msgstr "Naast dat u gewoon doorgaat met het implementeren van uw klasse zoals gewoonlijk, er headers in opnemend die u nodig zou kunnen hebben:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:119
msgid ""
"Since we are combining both class declaration and implementation in a single"
" file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in "
"the generated Doxygen documentation. After that comes a short description of"
" the unit test and the class must inherit from QObject and include the "
"Q_OBJECT macro."
msgstr "Omdat we zowel de declaratie van de klasse als de implementatie in één enkel bestand hebben, is het volgende de declaratie van de klasse. We beginnen met onze documentatie voor doxygen. Elke test zou juist gedocumenteerd moeten zijn. We gebruiken het doxygen ingroup directive zodat alle UnitTests als een module verschijnen in de gegenereerde documentatie voor Doxygen. Daarna komt ene korte beschrijving van de test van de eenheid en de klasse moet erven van QObject en de macro Q_OBJECT bevatten."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:136
msgid ""
"All our test methods are implemented as private slots. The QtTest framework "
"will sequentially call each private slot method in the test class. There are"
" four 'special' methods which if implemented will be called at the start of "
"the unit test (initTestCase), at the end of the unit test (cleanupTestCase)."
" Before each test method is called, the init() method will be called and "
"after each test method is called the cleanup() method is called. These "
"methods are handy in that they allow you to allocate and cleanup resources "
"prior to running each test, and the test unit as a whole."
msgstr "Alle onze testmethoden zijn geïmplementeerd als private slots. Het framework QtTest zal op volgorde vervolgens elke methode private slot in de testklasse aanroepen. Er zijn vier 'speciale' methoden die, indien geïmplementeerd, zullen worden aangeroepen aan het begin van de test van de eenheid (initTestCase), aan het einde van de test van de eenheid (cleanupTestCase). Vóórdat elke testmethode wordt aangeroepen, wordt de methode init() aangeroepen en na elke testmethode wordt de methode cleanup() aangeroepen. Deze methoden zij handig omdat zij u in staat stellen bronnen toe te wijzen en op te schonen, voorafgaande aan elke test, en de test van de eenheid als geheel."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:157
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. I am"
" implementing two methods here which illustrates two types of testing. In "
"the first case I want to generally test the various parts of the class are "
"working, I can use a functional testing approach. Once again, extreme "
"programmers would advocate writing these tests before implementing the "
"class. Then as you work your way through your class implementation you "
"iteratively run your unit tests. More and more test functions should "
"complete sucessfully as your class implementation work progresses, and when "
"the whole unit test passes, your new class is done and is now complete with "
"a repeatable way to validate it."
msgstr "Dan komen uw testmethoden, die geen van allen parameters zouden moeten hebben en void terug zouden moeten geven. De methoden zullen worden aangeroepen in de volgorde van de declaratie. Ik implementeer hier twee methoden die twee typen van testen illustreren. In het eerste geval wil ik in het algemeen testen of de verschillende delen van de klasse werken, ik kan een functionele benadering voor het testen gebruiken. Nogmaals, zeer ervaren programmeurs zouden er misschien voor pleiten deze testen te implementeren vóór het implementeren van de klasse. Als u zich dan door uw implementatie van de klasse heen werkt, voert u achtereenvolgens uw testen van de eenheid uit. Meer en meer testfuncties zouden met succes moeten voltooien als het werk aan uw implementatie van de klasse vordert, en wanneer de gehele test van de eenheid slaagt, is uw nieuwe klasse klaar en is nu compleet met een te herhalen manier om hem te valideren."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:168
msgid ""
"Typically your unit tests would only cover the public API of your class, and"
" normally you do not need to write tests for accessors and mutators. If it "
"should happen that an acccessor or mutator is not working as expected you "
"would normally implement a regression test to check for this (see lower "
"down)."
msgstr "Gewoonlijk zouden uw testen voor eenheden alleen de public API van uw klasse behandelen, en normaal gesproken behoeft u geen testen te schrijven voor accessors en mutators. Als het zou gebeuren dat een acccessor of mutator niet werkt zoals u verwacht, zou u normaal gesproken een regressietest implementeren om hierop te controleren (zie lager)."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:184
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example I "
"recently received a report by email that the cell count by rasters was off "
"by 1, throwing off all the statistics for the raster bands. I opened a bug "
"(ticket #832) and then created a regression test that replicated the bug "
"using a small test dataset (a 10x10 raster). Then I ran the test and ran it,"
" verifying that it did indeed fail (the cell count was 99 instead of 100). "
"Then I went to fix the bug and reran the unit test and the regression test "
"passed. I committed the regression test along with the bug fix. Now if "
"anybody breakes this in the source code again in the future, we can "
"immediatly identify that the code has regressed. Better yet before "
"committing any changes in the future, running our tests will ensure our "
"changes don't have unexpected side effects - like breaking existing "
"functionality."
msgstr "Vervolgens implementeren we onze regressietesten. Regressietesten zouden moeten worden geïmplementeerd om de condities te kunnen repliceren voor een bepaalde bug bug. Bijvoorbeeld: ik ontving recentelijk ene rapport per e-mail dat de telling van de cellen in rasters een verschil van 1 liet zien 1, wat alle statistieken voor the raster bands. I opened a bug (ticket #832) and then created a regression test that replicated the bug using a small test dataset (a 10x10 raster). Then I ran the test and ran it, verifying that it did indeed fail (the cell count was 99 instead of 100). Then I went to fix the bug and reran the unit test and the regression test passed. I committed the regression test along with the bug fix. Now if anybody breakes this in the source code again in the future, we can immediatly identify that the code has regressed. Better yet before committing any changes in the future, running our tests will ensure our changes don't have unexpected side effects - like breaking existing functionality."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:198
msgid ""
"There is one more benefit to regression tests - they can save you time. If "
"you ever fixed a bug that involved making changes to the source, and then "
"running the application and performing a series of convoluted steps to "
"replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr "er is nog ene voordeel van regressietests - zij kunnen u tijd besparen. Als u ooit een bug oploste die mede bestond uit het maken van wijzigingen aan de bron, en daarna de toepassing uitvoerde en een reeks gecompliceerde stappen uitvoerde om het probleem te repliceren, zal het onmiddellijk duidelijk zijn dat het eenvoudigweg implementeren van uw regressietest vóór het oplossen van het probleem het automatiseren van het testen voor oplossingen voor het probleem op een efficiënte manier laat uitvoeren."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:205
msgid ""
"To implement your regression test, you should follow the naming convention "
"of regression<TicketID> for your test functions. If no redmine ticket exists"
" for the regression, you should create one first. Using this approach allows"
" the person running a failed regression test easily go and find out more "
"information."
msgstr "Voor het implementeren van uw regressietest zou u de conventie voor het geven van namen van regressie<TicketID> moeten volgen voor uw testfuncties. Als er geen ticket in Redmine bestaat voor de regressie, zou u er eerst een moeten maken. gebruik hiervan maakt het voor de persoon die een mislukte regressietest uitvoert eenvoudiger om meer informatie te zoeken en te vinden."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:224
msgid ""
"Finally in our test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case I will "
"declare a QgsRasterLayer * which can be used by any of our test methods. The"
" raster layer will be created in the initTestCase() function which is run "
"before any other tests, and then destroyed using cleanupTestCase() which is "
"run after all tests. By declaring helper methods (which may be called by "
"various test functions) privately, you can ensure that they wont be "
"automatically run by the QTest executable that is created when we compile "
"our test."
msgstr "Tenslotte kunt u in onze declaratie van de testklasse nog persoonlijk enkele gegevensleden en hulpmethoden declareren die uw test voor eenheid nodig zou kunnen hebben. In ons geval zal ik een QgsRasterLayer * declareren die kan worden gebruikt door elk van onze testmethoden. De rasterlaag zal worden gemaakt in de functie initTestCase() die wordt uitgevoerd vóór enige andere test, en dan worden vernietigd met behulp van cleanupTestCase() wat na elke test wordt uitgevoerd. Door het persoonlijk declareren van hulpmethoden (die aangeroepen kunnen worden door verscheidene testfuncties), kunt u er voor zorgen dat zij niet automatisch zullen worden uitgevoerd door de uitvoerbare QTest die wordt gemaakt wanneer we onze test compileren."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:241
msgid ""
"That ends our class declaration. The implementation is simply inlined in the"
" same file lower down. First our init and cleanup functions:"
msgstr "Dat beëindigt onze declaratie van de klasse. De implementatie is eenvoudigweg opgenomen in hetzelfde bestand hieronder. Eerst onze functies init en cleanup:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:274
msgid "The above init function illustrates a couple of interesting things."
msgstr "Bovenstaande functie init illustreert een aantal interessante dingen."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:276
msgid ""
"I needed to manually set the QGIS application data path so that resources "
"such as srs.db can be found properly."
msgstr "Ik moest handmatig het gegevenspad naar de toepassing van QGIS instellen zodat bronnen zoals srs.db op de juiste manier worden gevonden."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:278
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the ``tenbytenraster.asc`` file. This was achieved by "
"using the compiler define ``TEST_DATA_PATH``. The define is created in the "
"``CMakeLists.txt`` configuration file under ``<QGIS Source "
"Root>/tests/CMakeLists.txt`` and is available to all QGIS unit tests. If you"
" need test data for your test, commit it under ``<QGIS Source "
"Root>/tests/testdata``. You should only commit very small datasets here. If "
"your test needs to modify the test data, it should make a copy of it first."
msgstr "Ten tweede is dat een door gegevens gedreven test dus moesten we een manier verschaffen om generiek het bestand ``tenbytenraster.asc`` te lokaliseren. Dit werd bereikt door met behulp van de compiler het ``TEST_DATA_PATH`` te definiëren. De definitie wordt gemaakt in het configuratiebestand ``CMakeLists.txt`` onder ``<QGIS Source Root>/tests/CMakeLists.txt`` en is beschikbaar voor alle testen van eenheden in QGIS. Als u gegevens voor uw test dient te testen, plaats het dan onder ``<QGIS Source Root>/tests/testdata``. U zou hier slechts hele kleine gegevenssets moeten plaatsen. Als uw test de testgegevens dient aan te passen zou het daar eerst een kopie van moeten maken."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:288
msgid ""
"Qt also provides some other interesting mechanisms for data driven testing, "
"so if you are interested to know more on the topic, consult the Qt "
"documentation."
msgstr "Qt verschaft ook enige andere interessante mechanismen voor gegevens gedreven testen, als u dus meer wilt weten over dit onderwerp, consulteer dan de documentatie van Qt."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:292
msgid ""
"Next lets look at our functional test. The isValid() test simply checks the "
"raster layer was correctly loaded in the initTestCase. QVERIFY is a Qt macro"
" that you can use to evaluate a test condition. There are a few other use "
"macros Qt provide for use in your tests including:"
msgstr "Laten we vervolgens eens kijken naar onze functionele test. De test isValid() controleert eenvoudigweg of de  rasterlaag juist werd geladen in de initTestCase. QVERIFY is een macro van Qt die u kunt gebruiken om de de voorwaarde van de test te evalueren. er zijn ook nog ene paar andere macro's die Qt verschaft om te gebruiken bij uw testen, inclusief:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:297
msgid "`QCOMPARE ( actual, expected )`"
msgstr "`QCOMPARE ( actual, expected )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:298
msgid "`QEXPECT_FAIL ( dataIndex, comment, mode )`"
msgstr "`QEXPECT_FAIL ( dataIndex, comment, mode )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:299
msgid "`QFAIL ( message )`"
msgstr "`QFAIL ( message )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:300
msgid "`QFETCH ( type, name )`"
msgstr "`QFETCH ( type, name )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:301
msgid "`QSKIP ( description, mode )`"
msgstr "`QSKIP ( description, mode )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:302
msgid "`QTEST ( actual, testElement )`"
msgstr "`QTEST ( actual, testElement )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:303
msgid "`QTEST_APPLESS_MAIN ( TestClass )`"
msgstr "`QTEST_APPLESS_MAIN ( TestClass )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:304
msgid "`QTEST_MAIN ( TestClass )`"
msgstr "`QTEST_MAIN ( TestClass )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:305
msgid "`QTEST_NOOP_MAIN ()`"
msgstr "`QTEST_NOOP_MAIN ()`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:306
msgid "`QVERIFY2 ( condition, message )`"
msgstr "`QVERIFY2 ( condition, message )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:307
msgid "`QVERIFY ( condition )`"
msgstr "`QVERIFY ( condition )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:308
msgid "`QWARN ( message )`"
msgstr "`QWARN ( message )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:310
msgid ""
"Some of these macros are useful only when using the Qt framework for data "
"driven testing (see the Qt docs for more detail)."
msgstr "Enkele van deze macro's zijn alleen nuttig bij het gebruiken van het Qt framework voor gegevens gedreven testen (bekijk de documentatie van Qt voor meer details)."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:320
msgid ""
"Normally your functional tests would cover all the range of functionality of"
" your classes public API where feasible. With our functional tests out the "
"way, we can look at our regression test example."
msgstr "Normaal gesproken zouden uw functionele testen het gehele bereik van de functionaliteit behandelen van uw klassen voor de public API waar mogelijk. met onze functionele testen uit de weg kunnen we kijken naar het voorbeeld van onze regressietest."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:324
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test is"
" simply a matter of using QVERIFY to check that the cell count meets the "
"expected value:"
msgstr "Omdat het probleem in bug #832 is een rapport is over een  foutieve telling van cellen, is het schrijven van onze test eenvoudigweg een geval van QVERIFY gebruiken om te controleren of de telling van de cellen voldoet aan de verwachte waarde:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:339
msgid ""
"With all the unit test functions implemented, there one final thing we need "
"to add to our test class:"
msgstr "Met alle functies voor de test van de eenheid geïmplementeerd, is er één laatste ding dat we moeten doen om onze testklasse toe te voegen:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:347
msgid ""
"The purpose of these two lines is to signal to Qt's moc that his is a QtTest"
" (it will generate a main method that in turn calls each test funtion.The "
"last line is the include for the MOC generated sources. You should replace "
"'testqgsrasterlayer' with the name of your class in lower case."
msgstr "Het doel van deze twee regels is om een signaal af te geven naar Qt's moc dat dit een QtTest is (het zal een hoofdmethode genereren die op zijn beurt elke testfunctie aanroept. De laatste regel is de include voor de door MOC gegenereerde bronnen. U zou 'testqgsrasterlayer' moeten vervangen door de naam van uw klasse in kleine letters."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:354
msgid "Adding your unit test to CMakeLists.txt"
msgstr "Uw test voor eenheden toevoegen aan CMakeLists.txt"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:357
msgid ""
"Adding your unit test to the build system is simply a matter of editing the "
"CMakeLists.txt in the test directory, cloning one of the existing test "
"blocks, and then replacing your test class name into it. For example:"
msgstr "Toevoegen van uw test voor eenheden aan het bouwsysteem is eenvoudigweg een geval van het bewerken van CMakeLists.txt in de map test, klonen van één van de bestaande tekstblokken, en dan de naam van uw testklasse daar invullen. Bijvoorbeeld:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:368
msgid "The ADD_QGIS_TEST macro explained"
msgstr "De macro ADD_QGIS_TEST uitgelegd"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:371
msgid ""
"I'll run through these lines briefly to explain what they do, but if you are"
" not interested, just do the step explained in the above section and "
"section."
msgstr "Ik zal kort door deze regels gaan om uit te leggen wat zij doen, maar als u daar niet in geïnteresseerd bent, doe dan alleen de stap die is uitgelegd in bovenstaand gedeelte."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:406
msgid ""
"Lets look a little more in detail at the individual lines. First we define "
"the list of sources for our test. Since we have only one source file "
"(following the methodology I described above where class declaration and "
"definition are in the same file) its a simple statement:"
msgstr "Laten we eens iets meer in detail kijken naar de individuele regels. Eerst definiëren we de lijst met bronnen voor onze test. Omdat we slechts één bronbestand hebben (aldus de methodologie volgend die ik hierboven beschreef waar declaratie van de klasse en definitie in hetzelfde bestand staan) is het een eenvoudig argument:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:415
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr "Omdat onze testklasse moet worden uitgevoerd door de Qt meta object compiler (moc) dienen we ook een aantal regels te verschaffen om dat mogelijk te maken:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:424
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation I included the moc outputs directly into our test class, so "
"that will give it (among other things) a main method so the class can be "
"compiled as an executable:"
msgstr "Vervolgens vertellen we cmake dat het een executable moet maken vanuit de testklasse. Onthoud dat in het vorige gedeelte op de laatste regel van de implementatie van de klasse ik de uitvoer voor MOC direct opnam in onze testklasse, zodat het (naast ander dingen) een hoofdmethode zal geven zodat de klasse als een executable kan worden gecompileerd:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:435
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but I will "
"be working to replace that with the specific Qt libraries that each class "
"needs only. Of course you also need to link to the relevant qgis libraries "
"as required by your unit test."
msgstr "Vervolgens dienen we enkele afhankelijkheden voor bibliotheken te specificeren. Op dit moment worden klassen geïmplementeerd met een catch-all QT_LIBRARIES afhankelijkheid, maar ik zal er aan werken om dat te vervangen door de specifieke bibliotheken van Qt die elke klasse alleen nodig heeft. Natuurlijk dient u ook de relevante bibliotheken van QGIS te koppelen, zoals vereist door uw test voor eneheden."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:445
msgid ""
"Next I tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something I plan to remove in the future so that "
"the tests can run directly from inside the source tree."
msgstr "Vervolgens vertel ik cmake om de testen te installeren op dezelfde plaats als waar de binaries van QGIS zelf staan. Dit is iets waarvan in van plan ben om dit in de toekomst te verwijderen zodat de testen direct vanuit de boom van de bron kunnen worden uitgevoerd."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:472
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / ctest."
" Here is where the best magic happens - we register the class with ctest. If"
" you recall in the overview I gave in the beginning of this section, we are "
"using both QtTest and CTest together. To recap, QtTest adds a main method to"
" your test unit and handles calling your test methods within the class. It "
"also provides some macros like ``QVERIFY`` that you can use as to test for "
"failure of the tests using conditions. The output from a QtTest unit test is"
" an executable which you can run from the command line. However when you "
"have a suite of tests and you want to run each executable in turn, and "
"better yet integrate running tests into the build process, the CTest is what"
" we use."
msgstr "Tenslotte gebruikt bovenstaande ``ADD_TEST`` om de test te registreren met cmake / ctest. Hier is waar de beste magie gebeurt - we registreren de klasse met ctest. Als u zich het overzicht nog herinnert dat ik ga in het begin van dit gedeelte, gebruiken we zowel QtTest als CTest samen. Recapitulerend, QtTest voegt een hoofdmethode toe aan uw test voor eenheden en behandelt het aanroepen van uw testmethoden binnen de klasse. Het verschaft ook enkele macro's zoals ``QVERIFY`` die u kunt gebruiken om te testen op mislukkingen van de door de testen gebruikte voorwaarden. De uitvoer van een QtTest test voor eenheden is een executable die u kunt uitvoeren vanaf de opdrachtregel. Wanneer u echter een suite van testen heeft en u wilt elke executable op zijn beurt uitvoeren, en beter nog uitvoerende testen integreren in het bouwproces, is de CTest wat we gebruiken."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:485
msgid "Building your unit test"
msgstr "Uw test voor eenheden bouwen"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:487
msgid ""
"To build the unit test you need only to make sure that ``ENABLE_TESTS=true``"
" in the cmake configuration. There are two ways to do this:"
msgstr "Voor het bouwen van de test voor eenheden dient u er alleen voor te zorgen dat ``ENABLE_TESTS=true`` in de configuratie cmake. Er zijn twee manieren om dat te doen:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:490
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively "
"set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr "Voer ``ccmake ..`` uit ( of ``cmakesetup ..`` onder Windows) en stel interactief de vlag ``ENABLE_TESTS`` in op ``ON``."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:492
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr "Voeg een vlag voor de opdrachtregel toe aan cmake bijv. ``cmake -DENABLE_TESTS=true ..``"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:494
msgid ""
"Other than that, just build QGIS as per normal and the tests should build "
"too."
msgstr "Anders dan dat,  bouw QGIS gewoon zoals normaal en de testen zouden meegebouwd moeten worden."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:498
msgid "Run your tests"
msgstr "Voer uw testen uit"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:501
msgid ""
"The simplest way to run the tests is as part of your normal build process:"
msgstr "De eenvoudigste manier om de testen uit te voeren is als deel van uw normale bouwproces:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:507
msgid ""
"The make test command will invoke CTest which will run each test that was "
"registered using the ADD_TEST CMake directive described above. Typical "
"output from make test will look like this:"
msgstr "De opdracht make test zal CTest activeren dat elke test zal uitvoeren die werd geregistreerd met behulp van de ADD_TEST CMake directive beschreven hierboven. Normale uitvoer van make test zal er uitzien zoals dit:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:527
msgid ""
"If a test fails, you can use the ctest command to examine more closely why "
"it failed. Use the ``-R`` option to specify a regex for which tests you want"
" to run and ``-V`` to get verbose output:"
msgstr "Als ene test mislukt, kunt u de opdracht ctest gebruiken om meer nader te bekijken waarom het mislukt is. Gebruik d optie ``-R`` om een regex te specificeren voor de testen die u wilt uitvoeren en ``-V`` om uitgebreide uitvoer te krijgen:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:571
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope you "
"will get into the habit of writing test to test new functionality and to "
"check for regressions. Some aspects of the test system (in particular the "
"CMakeLists.txt parts) are still being worked on so that the testing "
"framework works in a truly platform way. I will update this document as "
"things progress."
msgstr "Wel, dat is het einde voor dit gedeelte over het schrijven van testen voor eenheden in QGIS. We hopen dat u ook testen zult gaan schrijven om nieuwe functionaliteiten te testen en om te controleren op regressies. Aan sommige aspecten van het testsysteem (in het bijzonder de delen voor CMakeLists.txt) wordt nog steeds gewerkt zodat het framework voor testen werkt op een echte manier voor dat platform. Ik zal dit document bijwerken als dingen voor elkaar zijn."
