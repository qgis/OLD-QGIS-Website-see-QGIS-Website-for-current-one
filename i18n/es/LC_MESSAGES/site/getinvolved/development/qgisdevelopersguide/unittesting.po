# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, QGIS Contributors
# This file is distributed under the same license as the QGIS package.
# 
# Translators:
# Eric Armijo, 2016
# Minerva Durán Martínez <mine_tod@yahoo.com.mx>, 2016
# Rodrigo Armesto Baztán <rodri_Armesto@hotmail.com>, 2020
msgid ""
msgstr ""
"Project-Id-Version: QGIS Website\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-11 18:41+0200\n"
"PO-Revision-Date: 2016-03-05 14:48+0000\n"
"Last-Translator: Rodrigo Armesto Baztán <rodri_Armesto@hotmail.com>, 2020\n"
"Language-Team: Spanish (http://www.transifex.com/qgis/qgis-website/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: es\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:5
msgid "Unit Testing"
msgstr "Prueba de Unidad"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:7
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement to "
"qgis_core, and we will extend this requirement to other parts of the code "
"base once people are familiar with the procedures for unit testing explained"
" in the sections that follow."
msgstr "A noviembre de 2007, requerimos todas las nuevas características que van a sobreponerse a ser acompañados con una unidad de prueba. Al principio, nos hemos limitado a este requisito qgis_core, y vamos a ampliar este a otras partes de la base de código una vez que la gente está familiarizada con los procedimientos para las pruebas unitarias que se explican en las secciones que siguen."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:15
msgid "The QGIS testing framework - an overview"
msgstr "La infraestructura de prueba de QGIS - una visión general"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:17
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt testing "
"library) and CTest (a framework for compiling and running tests as part of "
"the CMake build process). Lets take an overview of the process before I "
"delve into the details:"
msgstr "La prueba de unidad se lleva a cabo utilizando una combinación de QTestLib (la biblioteca de pruebas Qt) y CTest (una infraestructura para compilar y ejecutar pruebas como parte del proceso de construcción de CMake). Demos una vista general del proceso antes de ahondar en los detalles:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:22
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written yet "
"when you start building your tests, and then as you implement your code you "
"can immediately validate each new functional part you add with your test. In"
" practive you will probably need to write tests for pre-existing code in "
"QGIS since we are starting with a testing framework well after much "
"application logic has already been implemented."
msgstr "Hay algo de código que desea probar, por ejemplo, una clase o función. defensores de programación extremas sugieren que el código no debe ser escrito incluso aún cuando se inicia la construcción de sus pruebas, y luego como implementar su código que pueden validar de inmediato cada nueva pieza funcional se agrega con su prueba. En la práctica, es probable que necesite escribir pruebas para el código preexistente en QGIS ya estamos empezando con un marco de pruebas bien después de la lógica de aplicación mucho ya se ha aplicado."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:30
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically a "
"client that creates an instance of a class and calls some methods on that "
"class. It will check the return from each method to make sure it matches the"
" expected value. If any one of the calls fails, the unit will fail."
msgstr "Se crea una prueba de unidad. Esto pasa bajo ``<QGIS Source Dir>/tests/src/core`` en caso de la biblioteca core. La prueba es básicamente un cliente que crea una instancia de la clase y llama algunos métodos de la clase. Revisará la respuesta de cada una para asegurarse de que coincide con el valor esperado. Si cualquiera de las llamadas falla, la unidad no funciona."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:36
msgid ""
"You include QtTestLib macros in your test class. This macro is processed by "
"the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr "Se incluyen macros QtTestLib en su clase de prueba. Este macro es procesado por el comilador objeto meta Qt (moc) y expande su clase de prueba en una aplicación ejecutable."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:40
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will "
"build your test."
msgstr "Se agrega una sección a la CMakeLists.txt en el directorio de pruebas que construirá su prueba."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:43
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. This "
"will ensure your tests actually get compiled when you type make."
msgstr "Asegurarse que tiene habilitado ``ENABLE_TESTING`` en ccmake / cmakesetup. Esto asegurará que sus pruebas en realidad se compilen cuando se teclea make."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:46
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if your"
" test is data driven (e.g. needs to load a shapefile). These test data "
"should be as small as possible and wherever possible you should use the "
"existing datasets already there. Your tests should never modify this data in"
" situ, but rather may a temporary copy somewhere if needed."
msgstr "Se añaden opcionalmente datos de prueba a ``<QGIS Source Dir>/tests/testdata`` si su prueba utiliza la información (por ejemplo, necesita cargar un archivo shape). Estos datos de prueba deben ser lo más pequeñas posible y siempre que sea posible se debe utilizar las bases de datos existentes ya allí. Sus pruebas nunca deben modificar estos datos in situ, sino más bien debe hacer una copia temporal en algún lugar si es necesario."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:52
msgid ""
"You compile your sources and install. Do this using normal ``make && (sudo)"
"  make install`` procedure."
msgstr "Se compila sus fuentes e instalar. Para ello, utilice el procedimiento normal ``make && (sudo) make install``."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:55
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though I will explain other aproaches that "
"offer more fine grained control over running tests."
msgstr "Ejecutar las pruebas. Normalmente, esto se hace simplemente haciendo ``make test`` después del paso ``make install``, aunque voy a explicar otros enfoques que ofrecen un control de grano más fino sobre las pruebas de funcionamiento."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:60
msgid ""
"Right with that overview in mind, I will delve into a bit of detail. I've "
"already done much of the configuration for you in CMake and other places in "
"the source tree so all you need to do are the easy bits - writing unit "
"tests!"
msgstr "Derecho con ese panorama en mente, voy a ahondar un poco de detalle. Ya se ha hecho la mayor parte de la configuración para usted en CMake y otros lugares en el árbol de origen por lo que todo lo que necesita hacer son los bits fáciles - ¡escribir las pruebas unitarias!"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:66
msgid "Creating a unit test"
msgstr "Creando una prueba de unidad"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:68
msgid ""
"Creating a unit test is easy - typically you will do this by just creating a"
" single .cpp file (not .h file is used) and implement all your test methods "
"as public methods that return void. I'll use a simple test class for "
"QgsRasterLayer throughout the section that follows to illustrate. By "
"convention we will name our test with the same name as the class they are "
"testing but prefixed with 'Test'. So our test implementation goes in a file "
"called testqgsrasterlayer.cpp and the class itself will be "
"TestQgsRasterLayer. First we add our standard copyright banner:"
msgstr "Crear una unidad de prueba es fácil - por lo general, esto se hace sólo por la creación de un único archivo .cpp (no se utiliza el archivo .h) y poner en práctica todos los métodos de prueba y públicos que devuelven void. Voy a usar una clase de prueba simple para QgsRasterLayer en toda la sección que sigue para ilustrar. Por convenio nombraremos nuestra prueba con el mismo nombre que la clase que están poniendo a prueba, pero con el prefijo 'Test'. Así que la implementación de prueba va en un archivo llamado qgsrasterlayer.cpp de prueba y la propia clase será prueba QgsRasterLayer. Primero añadimos nuestro banner estándar de copyright:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:94
msgid ""
"Next we use start our includes needed for the tests we plan to run. There is"
" one special include all tests should have:"
msgstr "A continuación, usamos comenzar nuestras implementaciones necesarias para las pruebas que planeamos ejecutar. Hay un adjunto especial que todas las pruebas deben tener:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:101
msgid ""
"Beyond that you just continue implementing your class as per normal, pulling"
" in whatever headers you may need:"
msgstr "Más allá de eso, simplemente continúe implementando su clase como de costumbre, agregando los encabezados que pueda necesitar:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:119
msgid ""
"Since we are combining both class declaration and implementation in a single"
" file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in "
"the generated Doxygen documentation. After that comes a short description of"
" the unit test and the class must inherit from QObject and include the "
"Q_OBJECT macro."
msgstr "Como estamos combinando tanto la declaración de clase como la implementación en un solo archivo, la declaración de clase viene a continuación. Comenzamos con nuestra documentación de doxygen. Cada caso de prueba debe estar debidamente documentado. Usamos la directiva doxygen ingroup para que todas las UnitTests aparezcan como un módulo en la documentación Doxygen generada. Después de eso viene una breve descripción de la prueba unitaria y la clase debe heredar de QObject e incluir la macro Q_OBJECT."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:136
msgid ""
"All our test methods are implemented as private slots. The QtTest framework "
"will sequentially call each private slot method in the test class. There are"
" four 'special' methods which if implemented will be called at the start of "
"the unit test (initTestCase), at the end of the unit test (cleanupTestCase)."
" Before each test method is called, the init() method will be called and "
"after each test method is called the cleanup() method is called. These "
"methods are handy in that they allow you to allocate and cleanup resources "
"prior to running each test, and the test unit as a whole."
msgstr "Todos nuestros métodos de prueba se implementan como espacios privados. El marco QtTest llamará secuencialmente a cada método de espacio privado en la clase de prueba. Existen cuatro métodos 'especiales' que, si se implementan, se invocarán al comienzo de la prueba unitaria (initTestCase), al final de la prueba unitaria (cleanupTestCase). Antes de llamar a cada método de prueba, se llamará al método init() y después de llamar a cada método de prueba, se llama al método cleanup(). Estos métodos son útiles porque le permiten asignar y limpiar recursos antes de ejecutar cada prueba, y la unidad de prueba en su conjunto."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:157
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. I am"
" implementing two methods here which illustrates two types of testing. In "
"the first case I want to generally test the various parts of the class are "
"working, I can use a functional testing approach. Once again, extreme "
"programmers would advocate writing these tests before implementing the "
"class. Then as you work your way through your class implementation you "
"iteratively run your unit tests. More and more test functions should "
"complete sucessfully as your class implementation work progresses, and when "
"the whole unit test passes, your new class is done and is now complete with "
"a repeatable way to validate it."
msgstr "Luego vienen sus métodos de prueba, todosellos no deben tomar parámetros y deben volver nulos. Los métodos se llamarán en orden de declaración. Estoy implementando dos métodos aquí que ilustran dos tipos de pruebas. En el primer caso que quiero probar en general, las diversas partes de la clase están funcionando, puedo usar un enfoque de prueba funcional. Una vez más, los programadores extremos recomendarían escribir estas pruebas antes de implementar la clase. Luego, a medida que avanza en la implementación de su clase, ejecuta iterativamente sus pruebas unitarias. Cada vez más funciones de prueba deben completarse con éxito a medida que avanza el trabajo de implementación de su clase, y cuando pasa la prueba de la unidad completa, su nueva clase termina y ahora está completa con una forma repetible de validarla."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:168
msgid ""
"Typically your unit tests would only cover the public API of your class, and"
" normally you do not need to write tests for accessors and mutators. If it "
"should happen that an acccessor or mutator is not working as expected you "
"would normally implement a regression test to check for this (see lower "
"down)."
msgstr "Por lo general, sus pruebas unitarias solo cubrirían la API pública de su clase, y normalmente no necesita escribir pruebas para accesorios y mutadores. Si ocurriera que un accesorio o mutador no funciona como se esperaba, normalmente implementaría una prueba de regresión para verificar esto (ver más abajo)"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:184
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example I "
"recently received a report by email that the cell count by rasters was off "
"by 1, throwing off all the statistics for the raster bands. I opened a bug "
"(ticket #832) and then created a regression test that replicated the bug "
"using a small test dataset (a 10x10 raster). Then I ran the test and ran it,"
" verifying that it did indeed fail (the cell count was 99 instead of 100). "
"Then I went to fix the bug and reran the unit test and the regression test "
"passed. I committed the regression test along with the bug fix. Now if "
"anybody breakes this in the source code again in the future, we can "
"immediatly identify that the code has regressed. Better yet before "
"committing any changes in the future, running our tests will ensure our "
"changes don't have unexpected side effects - like breaking existing "
"functionality."
msgstr "Luego implementamos nuestras pruebas de regresión. Las pruebas de regresión deben implementarse para replicar las condiciones de un error en particular. Por ejemplo, recientemente recibí un informe por correo electrónico de que el recuento de celdas por rásteres estaba desactivado en 1, eliminando todas las estadísticas de las bandas de ráster. Abrí un error (ticket #832) y luego creé una prueba de regresión que replicaba el error usando un pequeño conjunto de datos de prueba (un ráster de 10x10). Luego realicé la prueba y la ejecuté, verificando que efectivamente falló (el recuento de células fue de 99 en lugar de 100). Luego fui a arreglar el error y volví a clasificar la prueba de la unidad y pasó la prueba de regresión. Entregué la prueba de regresión junto con la corrección de errores. Ahora, si alguien viola esto en el código fuente nuevamente en el futuro, podemos identificar inmediatamente que el código ha retrocedido. Mejor aún, antes de confirmar cualquier cambio en el futuro, ejecutar nuestras pruebas garantizará que nuestros cambios no tengan efectos secundarios inesperados, como romper la funcionalidad existente."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:198
msgid ""
"There is one more benefit to regression tests - they can save you time. If "
"you ever fixed a bug that involved making changes to the source, and then "
"running the application and performing a series of convoluted steps to "
"replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr "Las pruebas de regresión tienen otro beneficio: pueden ahorrarle tiempo. Si alguna vez solucionó un error que implicaba hacer cambios en la fuente y luego ejecutar la aplicación y realizar una serie de pasos complicados para replicar el problema, será inmediatamente evidente que simplemente implementando su prueba de regresión antes de corregir el error le permitirá automatizar las pruebas para la resolución de errores de manera eficiente."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:205
msgid ""
"To implement your regression test, you should follow the naming convention "
"of regression<TicketID> for your test functions. If no redmine ticket exists"
" for the regression, you should create one first. Using this approach allows"
" the person running a failed regression test easily go and find out more "
"information."
msgstr "Para implementar su prueba de regresión, debe seguir la convención de nomenclatura de regresión<TicketID> para sus funciones de prueba. Si no existe un ticket de redmine para la regresión, primero debe crear uno. El uso de este enfoque permite a la persona que ejecuta una prueba de regresión fallida ir fácilmente y obtener más información."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:224
msgid ""
"Finally in our test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case I will "
"declare a QgsRasterLayer * which can be used by any of our test methods. The"
" raster layer will be created in the initTestCase() function which is run "
"before any other tests, and then destroyed using cleanupTestCase() which is "
"run after all tests. By declaring helper methods (which may be called by "
"various test functions) privately, you can ensure that they wont be "
"automatically run by the QTest executable that is created when we compile "
"our test."
msgstr "Finalmente, en nuestra declaración de clase de prueba, puede declarar en privado cualquier miembro de datos y métodos auxiliares que su prueba de unidad pueda necesitar. En nuestro caso, declararé un QgsRasterLayer * que puede ser utilizado por cualquiera de nuestros métodos de prueba. La capa ráster se creará en la función initTestCase() que se ejecuta antes de cualquier otra prueba, y luego se destruirá usando cleanupTestCase() que se ejecuta después de todas las pruebas. Al declarar los métodos auxiliares (que pueden ser llamados por varias funciones de prueba) de forma privada, puede asegurarse de que el ejecutable QTest que se crea cuando compilamos nuestra prueba no los ejecute automáticamente."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:241
msgid ""
"That ends our class declaration. The implementation is simply inlined in the"
" same file lower down. First our init and cleanup functions:"
msgstr "Con esto termina nuestra declaración de la clase. La aplicación es simplemente inline en el mismo archivo más abajo. Primero nuestro init y funciones de limpieza:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:274
msgid "The above init function illustrates a couple of interesting things."
msgstr "La función init anterior ilustra un par de cosas interesantes."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:276
msgid ""
"I needed to manually set the QGIS application data path so that resources "
"such as srs.db can be found properly."
msgstr "Se necesita establecer manualmente la ruta de datos de aplicación de QGIS para que los recursos tales como srs.db se puedan encontrar correctamente."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:278
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the ``tenbytenraster.asc`` file. This was achieved by "
"using the compiler define ``TEST_DATA_PATH``. The define is created in the "
"``CMakeLists.txt`` configuration file under ``<QGIS Source "
"Root>/tests/CMakeLists.txt`` and is available to all QGIS unit tests. If you"
" need test data for your test, commit it under ``<QGIS Source "
"Root>/tests/testdata``. You should only commit very small datasets here. If "
"your test needs to modify the test data, it should make a copy of it first."
msgstr "En segundo lugar, esta es una prueba basada en datos, por lo que necesitábamos proporcionar una forma de ubicar genéricamente el archivo ``tenbytenraster.asc``. Esto se logró utilizando el compilador define ``TEST_DATA_PATH ''. La definición se crea en el archivo de configuración ``CMakeLists.txt`` en ``<QGIS Source Root>/tests/CMakeLists.txt`` y está disponible para todas las pruebas unitarias de QGIS. Si necesita datos de prueba para su prueba, confírmela en `<QGIS Source Root>`/tests/testdata``. Aquí solo debe confirmar conjuntos de datos muy pequeños. Si su prueba necesita modificar los datos de la prueba, primero debe hacer una copia."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:288
msgid ""
"Qt also provides some other interesting mechanisms for data driven testing, "
"so if you are interested to know more on the topic, consult the Qt "
"documentation."
msgstr "Qt también algunos otros mecanismos interesantes para los datos de las pruebas conducidas, por lo que si está interesado en saber más sobre el tema, consulte la documentación de Qt."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:292
msgid ""
"Next lets look at our functional test. The isValid() test simply checks the "
"raster layer was correctly loaded in the initTestCase. QVERIFY is a Qt macro"
" that you can use to evaluate a test condition. There are a few other use "
"macros Qt provide for use in your tests including:"
msgstr "A continuación veamos nuestra prueba funcional. La prueba isValid() simplemente comprueba que la capa ráster ha cargado correctamente en el initTestCase. QVERIFY es una macro Qt que se puede utilizar para evaluar una condición de prueba. Hay algunas otros macros de uso que Qt proporcionan para su uso en sus pruebas, incluyendo:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:297
msgid "`QCOMPARE ( actual, expected )`"
msgstr "`QCOMPARE ( actual, expected )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:298
msgid "`QEXPECT_FAIL ( dataIndex, comment, mode )`"
msgstr "`QEXPECT_FAIL ( dataIndex, comment, mode )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:299
msgid "`QFAIL ( message )`"
msgstr "`QFAIL ( message )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:300
msgid "`QFETCH ( type, name )`"
msgstr "`QFETCH ( type, name )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:301
msgid "`QSKIP ( description, mode )`"
msgstr "`QSKIP ( description, mode )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:302
msgid "`QTEST ( actual, testElement )`"
msgstr "`QTEST ( actual, testElement )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:303
msgid "`QTEST_APPLESS_MAIN ( TestClass )`"
msgstr "`QTEST_APPLESS_MAIN ( TestClass )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:304
msgid "`QTEST_MAIN ( TestClass )`"
msgstr "`QTEST_MAIN ( TestClass )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:305
msgid "`QTEST_NOOP_MAIN ()`"
msgstr "`QTEST_NOOP_MAIN ()`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:306
msgid "`QVERIFY2 ( condition, message )`"
msgstr "`QVERIFY2 ( condition, message )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:307
msgid "`QVERIFY ( condition )`"
msgstr "`QVERIFY ( condition )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:308
msgid "`QWARN ( message )`"
msgstr "`QWARN ( message )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:310
msgid ""
"Some of these macros are useful only when using the Qt framework for data "
"driven testing (see the Qt docs for more detail)."
msgstr "Algunos de estos macros son útiles solo al utilizar el infraestructura Qt para datos dados de prueba (vea la documentación de Qt para mayor información)."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:320
msgid ""
"Normally your functional tests would cover all the range of functionality of"
" your classes public API where feasible. With our functional tests out the "
"way, we can look at our regression test example."
msgstr "Normalmente las pruebas funcionales cubrirían toda la gama de funcionalidad de sus clases de la API pública siempre que sea posible. Con nuestras pruebas funcionales fuera, podemos mirar a nuestro ejemplo de pruebas de regresión."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:324
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test is"
" simply a matter of using QVERIFY to check that the cell count meets the "
"expected value:"
msgstr "Dado que el problema en el error #832 es un informe erroneo de conteo de celdas, escribiendo nuestra prueba es simplemente es cuestión de usar QVERIFY para comprobar que el recuento de celdas se encuentra con el valor esperado: "

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:339
msgid ""
"With all the unit test functions implemented, there one final thing we need "
"to add to our test class:"
msgstr "Con todas las funciones de la unidad de prueba implementados, hay una última cosa que necesitamos para añadir a nuestra clase de prueba: "

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:347
msgid ""
"The purpose of these two lines is to signal to Qt's moc that his is a QtTest"
" (it will generate a main method that in turn calls each test funtion.The "
"last line is the include for the MOC generated sources. You should replace "
"'testqgsrasterlayer' with the name of your class in lower case."
msgstr "El propósito de estas dos líneas es señalarle al moc de Qt que la suya es una QtTest (que va a generar un método principal que a su vez llama a cada función de prueba .La última línea es la de incluir el MOC que genera fuentes. Debe reemplazar 'testqgsrasterlayer' con el nombre de su clase en minúsculas."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:354
msgid "Adding your unit test to CMakeLists.txt"
msgstr "Añadir su prueba de unidad a CMakeLists.txt "

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:357
msgid ""
"Adding your unit test to the build system is simply a matter of editing the "
"CMakeLists.txt in the test directory, cloning one of the existing test "
"blocks, and then replacing your test class name into it. For example:"
msgstr "Añadir su unidad de prueba al sistema de construcción es simplemente una cuestión de la edición de la CMakeLists.txt en el directorio de prueba, la clonación de uno de los bloques de prueba existentes, y volviendo a poner el nombre de su clase de prueba en ella. Por ejemplo: "

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:368
msgid "The ADD_QGIS_TEST macro explained"
msgstr "La macro ADD_QGIS_TEST explicado"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:371
msgid ""
"I'll run through these lines briefly to explain what they do, but if you are"
" not interested, just do the step explained in the above section and "
"section."
msgstr "Se correr a través de estas líneas para explicar brevemente lo que hacen, pero si usted no está interesado, sólo realice el paso explicado en la sección anterior y esta sección."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:406
msgid ""
"Lets look a little more in detail at the individual lines. First we define "
"the list of sources for our test. Since we have only one source file "
"(following the methodology I described above where class declaration and "
"definition are in the same file) its a simple statement:"
msgstr "Veamos un poco más en detalle en las líneas individuales. En primer lugar definimos la lista de fuentes para nuestra prueba. Ya que tenemos un único archivo de origen (siguiendo la metodología que he descrito anteriormente, donde se declaró la clase y la definición están en el mismo archivo) es una declaración simple: "

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:415
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr "Desde nuestra clase de prueba se debe ejecutar a través del compilador objeto meta Qt (moc) que necesitamos para proporcionar un par de líneas para que esto suceda también: "

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:424
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation I included the moc outputs directly into our test class, so "
"that will give it (among other things) a main method so the class can be "
"compiled as an executable:"
msgstr "A continuación le decimos a cmake que debe hacer un ejecutable a partir de la clase de prueba. Recuerde que en la sección anterior sobre la última línea de la implementación de la clase se incluyeron las salidas moc directamente en nuestra clase de prueba, por lo que le dará (entre otras cosas) un método principal por tanto la clase se puede compilar como un archivo ejecutable:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:435
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but I will "
"be working to replace that with the specific Qt libraries that each class "
"needs only. Of course you also need to link to the relevant qgis libraries "
"as required by your unit test."
msgstr "A continuación tenemos que especificar las dependencias de la bibliotecas. Por el momento, las clases han sido implementadas con un catch-all dependencia  QT_LIBRARIES, pero se trabaja para sustituir eso con las librerías Qt específicas que cada clase necesita solamente. Por supuesto también es necesario para enlazar a las bibliotecas qgis pertinentes según lo requiera la prueba de la unidad."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:445
msgid ""
"Next I tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something I plan to remove in the future so that "
"the tests can run directly from inside the source tree."
msgstr "A continuación le digo a cmake para instalar las pruebas para el mismo lugar que los qgis binarios. Esto es algo que va a extraer en el futuro para que las pruebas se puedan ejecutar directamente desde el interior del árbol de origen."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:472
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / ctest."
" Here is where the best magic happens - we register the class with ctest. If"
" you recall in the overview I gave in the beginning of this section, we are "
"using both QtTest and CTest together. To recap, QtTest adds a main method to"
" your test unit and handles calling your test methods within the class. It "
"also provides some macros like ``QVERIFY`` that you can use as to test for "
"failure of the tests using conditions. The output from a QtTest unit test is"
" an executable which you can run from the command line. However when you "
"have a suite of tests and you want to run each executable in turn, and "
"better yet integrate running tests into the build process, the CTest is what"
" we use."
msgstr "Finalmente los usos anteriores ``ADD_TEST`` para registrar la prueba con cmake / ctest. Aquí es donde la mejor magia sucede - que registra la clase con ctest. Si recuerdan en el resumen que se dio al comienzo de esta sección, se esta utilizando tanto QtTest y CTest juntos. Para recapitular, QtTest añade un método principal para su unidad de prueba y se encarga de llamar a sus métodos de prueba dentro de la clase. También proporciona algunas macros como ``QVERIFY`` que se puede utilizar como para probar la insuficiencia de las pruebas utilizando condiciones. El resultado de una prueba de unidad QtTest es un archivo ejecutable que se puede ejecutar desde la línea de comandos. Sin embargo cuando se tiene un conjunto de pruebas y se desea ejecutar cada ejecutable a su vez, y mejor aún integrar las pruebas que se ejecutan en el proceso de construcción, el CTest es lo que usamos."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:485
msgid "Building your unit test"
msgstr "Creando su unidad de prueba"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:487
msgid ""
"To build the unit test you need only to make sure that ``ENABLE_TESTS=true``"
" in the cmake configuration. There are two ways to do this:"
msgstr "Para construir la unidad de prueba sólo tendrá que asegurarse de que ``ENABLE_TESTS= true`` en la configuración cmake. Hay dos maneras de hacer esto:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:490
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively "
"set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr "Ejecutar ``ccmake ..`` ( o ``cmakesetup ..`` bajo windows) e interactivamente establecer la marca ``ENABLE_TESTS`` a ``ON``."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:492
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr "Añadir una marca de línea de comandos para cmake por ejemplo ``cmake -DENABLE_TESTS=true ..``"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:494
msgid ""
"Other than that, just build QGIS as per normal and the tests should build "
"too."
msgstr "Aparte de eso, simplemente construir QGIS con normalidad y las pruebas deben crearse también."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:498
msgid "Run your tests"
msgstr "Ejecutar las pruebas"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:501
msgid ""
"The simplest way to run the tests is as part of your normal build process:"
msgstr "La forma más sencilla de ejecutar las pruebas es como parte de su proceso de construcción normal:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:507
msgid ""
"The make test command will invoke CTest which will run each test that was "
"registered using the ADD_TEST CMake directive described above. Typical "
"output from make test will look like this:"
msgstr "El comando de prueba make invocará CTest que se ejecutará en cada prueba que se registró usando la directiva ADD_TEST que CMake ha descrito anteriormente. La salida típica de la prueba de make se verá así:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:527
msgid ""
"If a test fails, you can use the ctest command to examine more closely why "
"it failed. Use the ``-R`` option to specify a regex for which tests you want"
" to run and ``-V`` to get verbose output:"
msgstr "Si una prueba falla, se puede utilizar el comando ctest para examinar más de cerca por qué ha fallado. Utilice la opción ``-R`` para especificar una expresión regular para las pruebas que desea ejecutar y ``-V`` para obtener una salida detallada:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:571
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope you "
"will get into the habit of writing test to test new functionality and to "
"check for regressions. Some aspects of the test system (in particular the "
"CMakeLists.txt parts) are still being worked on so that the testing "
"framework works in a truly platform way. I will update this document as "
"things progress."
msgstr "Así concluye esta sección sobre escribir las pruebas unitarias en QGIS. Esperamos que obtenga el hábito de la prueba de escritura para probar nuevas funcionalidades y para comprobar si hay regresiones. Algunos aspectos del sistema de prueba (en particular, las partes CMakeLists.txt) todavía se está trabajando para que el marco de pruebas funcione de una verdadera plataforma. Se actualizará este documento como progresan las cosas."
