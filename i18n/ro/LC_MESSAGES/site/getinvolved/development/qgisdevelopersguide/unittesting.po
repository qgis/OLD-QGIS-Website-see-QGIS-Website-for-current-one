# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, QGIS Contributors
# This file is distributed under the same license as the QGIS package.
# 
# Translators:
# Richard Duivenvoorde <richard@duif.net>, 2016
# Sorin Călinică <scalinica@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: QGIS Website\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-11 18:41+0200\n"
"PO-Revision-Date: 2016-03-05 14:48+0000\n"
"Last-Translator: Richard Duivenvoorde <richard@duif.net>, 2016\n"
"Language-Team: Romanian (http://www.transifex.com/qgis/qgis-website/language/ro/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"
"Language: ro\n"
"Plural-Forms: nplurals=3; plural=(n==1?0:(((n%100>19)||((n%100==0)&&(n!=0)))?2:1));\n"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:5
msgid "Unit Testing"
msgstr "Teste de Unitate"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:7
msgid ""
"As of November 2007 we require all new features going into master to be "
"accompanied with a unit test. Initially we have limited this requirement to "
"qgis_core, and we will extend this requirement to other parts of the code "
"base once people are familiar with the procedures for unit testing explained"
" in the sections that follow."
msgstr "Din noiembrie 2007 am cerut ca toate noile caracteristici care intră în versiunea master să fie însoțite de teste de unitate. Inițial ne-am limitat la qgis_core, apoi vom extinde această cerință pentru alte părți ale bazei de cod, o dată ce dezvoltatorii se vor familiariza cu procedurile pentru testele de unitate, detaliate în secțiunile următoare."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:15
msgid "The QGIS testing framework - an overview"
msgstr "Cadrul de testare QGIS - o privire de ansamblu"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:17
msgid ""
"Unit testing is carried out using a combination of QTestLib (the Qt testing "
"library) and CTest (a framework for compiling and running tests as part of "
"the CMake build process). Lets take an overview of the process before I "
"delve into the details:"
msgstr "Testele de unitate se efectuează folosind o combinație de QTestLib (biblioteca de testare Qt) și CTest (un cadru pentru compilarea și rularea testelor, ca parte a procesului de compilare CMake). Haideți să aruncăm o privire asupra procesului, înainte de a intra în detalii:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:22
msgid ""
"There is some code you want to test, e.g. a class or function. Extreme "
"programming advocates suggest that the code should not even be written yet "
"when you start building your tests, and then as you implement your code you "
"can immediately validate each new functional part you add with your test. In"
" practive you will probably need to write tests for pre-existing code in "
"QGIS since we are starting with a testing framework well after much "
"application logic has already been implemented."
msgstr "Să presupunem că există un cod pe care ar trebui să-l testați, cum ar fi o clasă sau o funcție. Adepții programării extreme susțin că imediat ce începeți scrierea unui cod ar trebui să începeți și construirea testelor, astfel că, pe măsură ce implementați codul, să puteți valida imediat, cu ajutorul testului, fiecare nouă parte funcțională adăugată. În practică va trebui, probabil, să scrieți teste pentru codul pre-existent în QGIS, deoarece efectuăm testarea mult prea târziu, după ce logica aplicației a fost deja implementată."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:30
msgid ""
"You create a unit test. This happens under ``<QGIS Source "
"Dir>/tests/src/core`` in the case of the core lib. The test is basically a "
"client that creates an instance of a class and calls some methods on that "
"class. It will check the return from each method to make sure it matches the"
" expected value. If any one of the calls fails, the unit will fail."
msgstr "Creați un test de unitate. Acest lucru se întâmplă în directorul ``<QGIS Source Dir>/tests/src/core``, în cazul bibliotecilor de bază. Testul este de fapt un client care creează o instanță a unei clase, apelând unele metode ale acestei clase. Acesta va verifica valorile returnate din fiecare metodă, pentru a se asigura că se potrivesc valorilor așteptate. În cazul în care unul dintre apeluri eșuează, testul de unitate va eșua."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:36
msgid ""
"You include QtTestLib macros in your test class. This macro is processed by "
"the Qt meta object compiler (moc) and expands your test class into a "
"runnable application."
msgstr "Includeți macro-urile QtTestLib în clasa dvs. de test. Macrocomenzile sunt procesate de către compilatorul de obiecte meta Qt (MOC) și transformă clasa de testare într-o aplicație executabilă."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:40
msgid ""
"You add a section to the CMakeLists.txt in your tests directory that will "
"build your test."
msgstr "Adăugați o secțiune la fișierul CMakeLists.txt din directorul testelor dvs., care va construi testul."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:43
msgid ""
"You ensure you have ``ENABLE_TESTING`` enabled in ccmake / cmakesetup. This "
"will ensure your tests actually get compiled when you type make."
msgstr "Asigurați-vă că ați activat ``ENABLE_TESTING`` în ccmake / cmakesetup. Astfel, vă veți asigura că testele dumneavoastră se compilează atunci când tastați make."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:46
msgid ""
"You optionally add test data to ``<QGIS Source Dir>/tests/testdata`` if your"
" test is data driven (e.g. needs to load a shapefile). These test data "
"should be as small as possible and wherever possible you should use the "
"existing datasets already there. Your tests should never modify this data in"
" situ, but rather may a temporary copy somewhere if needed."
msgstr "Opțional, adăugați datele de testare în ``<QGIS Source Dir>/tests/testdata`` dacă testul dvs. este dirijat cu ajutorul datelor (de exemplu, trebuie încărcat un fișier shape). Aceste date de testare ar trebui să fie cât mai mici posibil, și ori de câte ori se poate, ar trebui să utilizați seturile de date existente deja acolo. Testele dvs. nu ar trebui să modifice aceste date în sine, ci mai degrabă o copie temporară, pe undeva, dacă este necesar."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:52
msgid ""
"You compile your sources and install. Do this using normal ``make && (sudo)"
"  make install`` procedure."
msgstr "Compilați sursele, apoi efectuați instalarea. Faceți acest lucru utilizând procedura normală ``make && (sudo) make install``."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:55
msgid ""
"You run your tests. This is normally done simply by doing ``make test`` "
"after the ``make install`` step, though I will explain other aproaches that "
"offer more fine grained control over running tests."
msgstr "Rulați testele. Acest lucru se face în mod normal, pur și simplu prin accesarea ``make test`` după pasul ``make install``, deși vom prezenta și alte abordări, care oferă un control mai fin asupra testelor de funcționare."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:60
msgid ""
"Right with that overview in mind, I will delve into a bit of detail. I've "
"already done much of the configuration for you in CMake and other places in "
"the source tree so all you need to do are the easy bits - writing unit "
"tests!"
msgstr "Având imaginea de ansamblu în minte, vom intra un pic în detalii. O mare parte din configurație este realizată deja în CMake, precum și în alte locuri din arborele sursei, astfel încât tot ce mai trebuie să faceți este simplu - să scrieți testele de unitate!"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:66
msgid "Creating a unit test"
msgstr "Crearea unui test de unitate"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:68
msgid ""
"Creating a unit test is easy - typically you will do this by just creating a"
" single .cpp file (not .h file is used) and implement all your test methods "
"as public methods that return void. I'll use a simple test class for "
"QgsRasterLayer throughout the section that follows to illustrate. By "
"convention we will name our test with the same name as the class they are "
"testing but prefixed with 'Test'. So our test implementation goes in a file "
"called testqgsrasterlayer.cpp and the class itself will be "
"TestQgsRasterLayer. First we add our standard copyright banner:"
msgstr "Crearea unui test de unitate este ușoară - de obicei, veți face acest lucru doar prin crearea un singur fișier .cpp (fișierul .h nu este utilizat), și implementând toate metodele de testare sub formă de metode publice care returnează valori vide. Pentru demonstrație, vom folosi o clasă de test simplă pentru QgsRasterLayer, de-a lungul secțiunii care urmează. Prin convenție vom numi testul nostru cu același nume ca și clasa de testare, dar prefixat cu 'Test'. Așa că testul va fi stocat într-un fișier denumit testqgsrasterlayer.cpp iar clasa în sine va fi TestQgsRasterLayer. În primul rând vom adăuga informațiile privind drepturile de autor:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:94
msgid ""
"Next we use start our includes needed for the tests we plan to run. There is"
" one special include all tests should have:"
msgstr "În continuare vom folosi declarațiile de includere, necesare testelor pe care ne propunem să le rulăm. Există una specială, care ar trebui să existe pentru toate testele:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:101
msgid ""
"Beyond that you just continue implementing your class as per normal, pulling"
" in whatever headers you may need:"
msgstr "Mai departe, continuați implementarea normală a clasei, incluzând antetele de care aveți nevoie:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:119
msgid ""
"Since we are combining both class declaration and implementation in a single"
" file the class declaration comes next. We start with our doxygen "
"documentation. Every test case should be properly documented. We use the "
"doxygen ingroup directive so that all the UnitTests appear as a module in "
"the generated Doxygen documentation. After that comes a short description of"
" the unit test and the class must inherit from QObject and include the "
"Q_OBJECT macro."
msgstr "Din moment ce combinăm atât declarația clasei cât și implementarea într-un singur fișier, urmează declarația clasei. Vom începe cu documentația doxygen. Fiecare caz de testare trebuie să fie documentat în mod corespunzător. Folosim directiva doxygen ingroup, astfel încât toate Unitățile de Testare apar ca module în documentația Doxygen generată. Urmează apoi o scurtă descriere a unității de testare, clasa trebuind să moștenească QObject și să includă macrocomanda Q_OBJECT."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:136
msgid ""
"All our test methods are implemented as private slots. The QtTest framework "
"will sequentially call each private slot method in the test class. There are"
" four 'special' methods which if implemented will be called at the start of "
"the unit test (initTestCase), at the end of the unit test (cleanupTestCase)."
" Before each test method is called, the init() method will be called and "
"after each test method is called the cleanup() method is called. These "
"methods are handy in that they allow you to allocate and cleanup resources "
"prior to running each test, and the test unit as a whole."
msgstr "Toate metodele noastre de testare sunt implementate ca sloturi private. Cadrul de lucru QtTest va apela succesiv fiecare metodă slot privată din clasa de test. Există patru metode 'speciale' care, dacă sunt implementate, vor fi apelate la începutul testului de unitate (initTestCase), și la sfârșitul testului unitate (cleanupTestCase). Înainte de apelarea fiecărei metode de testare va fi apelată metoda init(), iar după fiecare metodă de testare este apelată metoda cleanup(). Aceste metode sunt foarte utile întrucât vă permit alocarea și curățarea resurselor înainte de rularea fiecărui test, și a unității de testare în ansamblul său."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:157
msgid ""
"Then come your test methods, all of which should take no parameters and "
"should return void. The methods will be called in order of declaration. I am"
" implementing two methods here which illustrates two types of testing. In "
"the first case I want to generally test the various parts of the class are "
"working, I can use a functional testing approach. Once again, extreme "
"programmers would advocate writing these tests before implementing the "
"class. Then as you work your way through your class implementation you "
"iteratively run your unit tests. More and more test functions should "
"complete sucessfully as your class implementation work progresses, and when "
"the whole unit test passes, your new class is done and is now complete with "
"a repeatable way to validate it."
msgstr "Apoi urmează metodele de testare, care nu ar trebui să preia parametri, dar ar trebui să se întoarcă valoarea vidă. Metodele vor fi apelate în ordinea declarației. Vom implementa două metode aici, care ilustrează două tipuri de teste. În primul caz, pentru a testa, în general, dacă diferitele părți ale clasei lucrează, vom folosi o abordare de testare funcțională. Încă o dată, programatorii extremi pledează pentru scrierea acestor teste înainte de implementarea clasei. Apoi, pe măsură ce lucrați la implementarea clasei dvs. rulați iterativ testele de unitate. Cât mai multe funcții de testare ar trebui să se finalizeze cu succes în timp ce implementarea clasei progresează, iar după ce întregul test de unitate se încheie corect, noua dvs. clasă este gata, dispunând de un mod repetabil de validare."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:168
msgid ""
"Typically your unit tests would only cover the public API of your class, and"
" normally you do not need to write tests for accessors and mutators. If it "
"should happen that an acccessor or mutator is not working as expected you "
"would normally implement a regression test to check for this (see lower "
"down)."
msgstr "În mod normal, testele dumneavoastră de unitare vor acoperi doar API-ul public al clasei, nefiind necesară scrierea testelor pentru accesori şi mutatori. Dacă s-ar întâmpla ca un acccesor sau un mutator să nu funcționeze conform așteptărilor, veți implementa un test de regresie, pentru a verifica acest lucru (așa cum se poate vedea mai departe)."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:184
msgid ""
"Next we implement our regression tests. Regression tests should be "
"implemented to replicate the conditions of a particular bug. For example I "
"recently received a report by email that the cell count by rasters was off "
"by 1, throwing off all the statistics for the raster bands. I opened a bug "
"(ticket #832) and then created a regression test that replicated the bug "
"using a small test dataset (a 10x10 raster). Then I ran the test and ran it,"
" verifying that it did indeed fail (the cell count was 99 instead of 100). "
"Then I went to fix the bug and reran the unit test and the regression test "
"passed. I committed the regression test along with the bug fix. Now if "
"anybody breakes this in the source code again in the future, we can "
"immediatly identify that the code has regressed. Better yet before "
"committing any changes in the future, running our tests will ensure our "
"changes don't have unexpected side effects - like breaking existing "
"functionality."
msgstr "În continuare, vom implementa testele noastre de regresie. Implementarea acestora ar trebui să fie făcută în așa fel, încât să poată reproduce condițiile particulare ale oricărei erori. De exemplu, am primit recent un raport prin e-mail, în care se preciza că numărul de celule din rastere este întotdeauna mai mic cu 1, lucru care denatura toate statisticile pentru benzile raster. Am înregistrat eroarea (prin tichetul #832) și apoi am creat un test de regresie care replica defecțiunea, cu ajutorul unui set de date de test restrâns (un raster 10x10). Apoi am rulat testul, certificând veridicitatea informației (faptul că numărul de celule a fost de 99 în loc de 100). Am corectat eroarea, am rulat iarăși testul de unitate și trecând cu succes de testul de regresie. Am urcat în baza de cod testul de regresie, alături de codul corect. Ulterior, dacă cineva se va bloca la acest pas, vom putea identifica imediat porțiunea de cod care a regresat. În plus, pe viitor, chiar înainte de a înregistra modificările în baza codului principal, rulând aceste teste, ne vom asigura că schimbările aduse nu au efecte adverse neașteptate - cum ar fi întreruperea funcționalității existente."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:198
msgid ""
"There is one more benefit to regression tests - they can save you time. If "
"you ever fixed a bug that involved making changes to the source, and then "
"running the application and performing a series of convoluted steps to "
"replicate the issue, it will be immediately apparent that simply "
"implementing your regression test before fixing the bug will let you "
"automate the testing for bug resolution in an efficient manner."
msgstr "Mai există un beneficiu al prezenței testelor de regresie - acestea pot aduce economie de timp. Dacă ați depanat vreodată o eroare care a implicat efectuarea de modificări în codul sursă, urmată de rularea aplicației și efectuarea unei serii de pași extrem de complicați pentru a reproduce problema, va fi imediat evident că simpla implementare a testului de regresie înainte de corectarea erorii permite automatizarea testării, ceea ce reprezintă o eliminare eficientă a defectelor."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:205
msgid ""
"To implement your regression test, you should follow the naming convention "
"of regression<TicketID> for your test functions. If no redmine ticket exists"
" for the regression, you should create one first. Using this approach allows"
" the person running a failed regression test easily go and find out more "
"information."
msgstr "Pentru a implementa testul de regresie, ar trebui să urmați convenția de denumire a regresiei<TicketID> pentru funcțiile de testare. În cazul în care nu există deja un tichet Redmine pentru regresie, ar trebui să creați mai întâi unul. Această abordare facilitează persoanei care rulează un test de regresie nereușit, obținerea de informații suplimentare."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:224
msgid ""
"Finally in our test class declaration you can declare privately any data "
"members and helper methods your unit test may need. In our case I will "
"declare a QgsRasterLayer * which can be used by any of our test methods. The"
" raster layer will be created in the initTestCase() function which is run "
"before any other tests, and then destroyed using cleanupTestCase() which is "
"run after all tests. By declaring helper methods (which may be called by "
"various test functions) privately, you can ensure that they wont be "
"automatically run by the QTest executable that is created when we compile "
"our test."
msgstr "În cele din urmă, în declarația clasei test puteți declara, în mod privat, datele membru și metodele ajutătoare de care ați putea avea nevoie în testele de unitate. În cazul nostru, vom declara un QgsRasterLayer * care poate fi folosit de către oricare dintre metodele noastre de testare. Stratul raster va fi creat în funcția initTestCase(), care este rulat înainte de oricare alte teste, iar apoi va fi distrus de către cleanupTestCase(), care se execută după toate testele. Prin declararea metodelor ajutătoare (care pot fi apelate prin diverse funcții de testare) în mod privat, vă veți asigura că nu vor fi apelate în mod automat de către executabilul QTest, care este creat în urma compilării testului nostru."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:241
msgid ""
"That ends our class declaration. The implementation is simply inlined in the"
" same file lower down. First our init and cleanup functions:"
msgstr "Astfel se termină declarația clasei noastre. Implementarea are loc pur și simplu, în partea de jos a fișierului. Mai întâi are loc inițializarea și curățarea funcțiilor :"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:274
msgid "The above init function illustrates a couple of interesting things."
msgstr "Funcția de inițializare de mai sus ilustrează câteva lucruri interesante."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:276
msgid ""
"I needed to manually set the QGIS application data path so that resources "
"such as srs.db can be found properly."
msgstr "Trebuie să setăm manual calea către datele aplicației QGIS, astfel încât resursele, cum ar fi srs.db, să poată fi găsite în mod corect."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:278
msgid ""
"Secondly, this is a data driven test so we needed to provide a way to "
"generically locate the ``tenbytenraster.asc`` file. This was achieved by "
"using the compiler define ``TEST_DATA_PATH``. The define is created in the "
"``CMakeLists.txt`` configuration file under ``<QGIS Source "
"Root>/tests/CMakeLists.txt`` and is available to all QGIS unit tests. If you"
" need test data for your test, commit it under ``<QGIS Source "
"Root>/tests/testdata``. You should only commit very small datasets here. If "
"your test needs to modify the test data, it should make a copy of it first."
msgstr "În al doilea rând, acesta este un test dirijat cu ajutorul datelor, astfel încât trebuie să oferim o modalitate de a localiza, în mod generic, fișierul ``tenbytenraster.asc``. Acest lucru a fost realizat prin utilizarea definiția de compilator ``TEST_DATA_PATH``. Definiția este creată în fișierul de configurare ``CMakeLists.txt`` din ``<QGIS Source Root>/tests/CMakeLists.txt``, fiind disponibilă pentru toate testele de unitate QGIS. Dacă aveți nevoie de date pentru testul dumneavoastră, urcați-le în ``<QGIS Source Root>/tests/testdata``. Ar trebui să urcați aici doar seturi de date foarte mici. În cazul în care testul trebuie să modifice datele, ar trebui să faceți mai întâi o copie a acestora."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:288
msgid ""
"Qt also provides some other interesting mechanisms for data driven testing, "
"so if you are interested to know more on the topic, consult the Qt "
"documentation."
msgstr "Qt oferă, de asemenea, alte câteva mecanisme interesante pentru testarea dirijată cu ajutorul datelor, așa că, dacă vă interesează să aflați mai multe despre acest subiect, consultați documentația Qt."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:292
msgid ""
"Next lets look at our functional test. The isValid() test simply checks the "
"raster layer was correctly loaded in the initTestCase. QVERIFY is a Qt macro"
" that you can use to evaluate a test condition. There are a few other use "
"macros Qt provide for use in your tests including:"
msgstr "În continuare, haideți să ne uităm la testul nostru funcțional. Testul isValid() verifică dacă stratul raster a fost încărcat corect în initTestCase. QVERIFY este o macrocomandă Qt pe care o puteți utiliza pentru a evalua o condiție de testare. Qt prevede alte câteva macro-uri care se pot utiliza în testele dumneavoastră, printre care:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:297
msgid "`QCOMPARE ( actual, expected )`"
msgstr "`QCOMPARE ( actual, expected )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:298
msgid "`QEXPECT_FAIL ( dataIndex, comment, mode )`"
msgstr "`QEXPECT_FAIL ( dataIndex, comentariu, mod )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:299
msgid "`QFAIL ( message )`"
msgstr "`QFAIL ( mesaj )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:300
msgid "`QFETCH ( type, name )`"
msgstr "`QFETCH ( tip, nume )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:301
msgid "`QSKIP ( description, mode )`"
msgstr "`QSKIP ( descriere, mod )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:302
msgid "`QTEST ( actual, testElement )`"
msgstr "`QTEST ( actual, testElement )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:303
msgid "`QTEST_APPLESS_MAIN ( TestClass )`"
msgstr "`QTEST_APPLESS_MAIN ( TestClass )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:304
msgid "`QTEST_MAIN ( TestClass )`"
msgstr "`QTEST_MAIN ( TestClass )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:305
msgid "`QTEST_NOOP_MAIN ()`"
msgstr "`QTEST_NOOP_MAIN ()`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:306
msgid "`QVERIFY2 ( condition, message )`"
msgstr "`QVERIFY2 ( condiție, mesaj )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:307
msgid "`QVERIFY ( condition )`"
msgstr "`QVERIFY ( condiție )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:308
msgid "`QWARN ( message )`"
msgstr "`QWARN ( mesaj )`"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:310
msgid ""
"Some of these macros are useful only when using the Qt framework for data "
"driven testing (see the Qt docs for more detail)."
msgstr "Unele dintre aceste macro-uri sunt utile numai atunci când se utilizează cadrul de lucru Qt, pentru testarea cu ajutorul datelor (a se vedea documentația Qt, pentru mai multe detalii)."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:320
msgid ""
"Normally your functional tests would cover all the range of functionality of"
" your classes public API where feasible. With our functional tests out the "
"way, we can look at our regression test example."
msgstr "În mod normal, testele funcționale ar putea acoperi toată gama de funcționalități a claselor dvs. API publice, acolo unde este fezabil. Testele funcționale fiind gata, ne putem uita la exemplul nostru de test de regresie."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:324
msgid ""
"Since the issue in bug #832 is a misreported cell count, writing our test is"
" simply a matter of using QVERIFY to check that the cell count meets the "
"expected value:"
msgstr "Având în vedere că problema #832 raportează un număr eronat de celule, scrierea testului nostru constă pur și simplu în folosirea macrocomenzii QVERIFY, pentru a verifica dacă numărul de celule corespunde valorii așteptate:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:339
msgid ""
"With all the unit test functions implemented, there one final thing we need "
"to add to our test class:"
msgstr "Având toate funcțiile de testare a unităților implementate, rămâne să adăugăm un ultim lucru clasei noastre de testare:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:347
msgid ""
"The purpose of these two lines is to signal to Qt's moc that his is a QtTest"
" (it will generate a main method that in turn calls each test funtion.The "
"last line is the include for the MOC generated sources. You should replace "
"'testqgsrasterlayer' with the name of your class in lower case."
msgstr "În scopul acestor două linii este de a semnala compilatorului moc Qt că are de-a face cu un QtTest (acesta va genera o metodă principală, care, la rândul ei, va apela fiecare test funcțional. Ultima linie reprezintă definiția de includere pentru sursele generate de MOC. Ar trebui să înlocuiți 'testqgsrasterlayer' cu numele, scris cu litere mici, al clasei dvs."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:354
msgid "Adding your unit test to CMakeLists.txt"
msgstr "Adăugarea testului de unitate în CMakeLists.txt"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:357
msgid ""
"Adding your unit test to the build system is simply a matter of editing the "
"CMakeLists.txt in the test directory, cloning one of the existing test "
"blocks, and then replacing your test class name into it. For example:"
msgstr "Adăugarea testului de unitate în sistemul de compilare reprezintă doar o chestiune de editare a fișierului CMakeLists.txt din directorul de testare, prin clonarea unuia dintre blocurile de testare existente, și apoi prin înlocuirea numele clasei de test din interiorul său. De exemplu:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:368
msgid "The ADD_QGIS_TEST macro explained"
msgstr "Adăugarea macocomenzii ADD_QGIS_TEST"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:371
msgid ""
"I'll run through these lines briefly to explain what they do, but if you are"
" not interested, just do the step explained in the above section and "
"section."
msgstr "Vom parcurge pe scurt aceste linii, pentru a explica ceea ce fac, dar dacă nu vă interesează, trebuie să faceți doar pasul explicat în secțiunea de mai sus."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:406
msgid ""
"Lets look a little more in detail at the individual lines. First we define "
"the list of sources for our test. Since we have only one source file "
"(following the methodology I described above where class declaration and "
"definition are in the same file) its a simple statement:"
msgstr "Să ne uităm un pic, mai în detaliu, la liniile individuale. Mai întâi definim lista surselor pentru testul nostru. Din moment ce avem doar un singur fișier sursă (urmând metodologia I descrisă mai sus, în care declarația și definiția de clasă rezidă în același fișier) vom efectua o declarație simplă:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:415
msgid ""
"Since our test class needs to be run through the Qt meta object compiler "
"(moc) we need to provide a couple of lines to make that happen too:"
msgstr "Din moment ce clasa noastră de test trebuie să fie executată prin intermediul compilatorului meta-obiect (MOC) din Qt, trebuie să indicăm acest lucru printr-o pereche de linii:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:424
msgid ""
"Next we tell cmake that it must make an executable from the test class. "
"Remember in the previous section on the last line of the class "
"implementation I included the moc outputs directly into our test class, so "
"that will give it (among other things) a main method so the class can be "
"compiled as an executable:"
msgstr "În continuare vom indica lui cmake faptul că trebuie creeze un executabil din clasa de test. Am efectuat acest lucru în secțiunea anterioară, pe ultima linie a implementării clasei, unde am inclus ieșirile MOC direct în clasa noastră de testare, astfel că îi vom oferi (printre altele), o metodă principală, astfel încât clasa să poate fi compilată ca un executabil:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:435
msgid ""
"Next we need to specify any library dependencies. At the moment, classes "
"have been implemented with a catch-all QT_LIBRARIES dependency, but I will "
"be working to replace that with the specific Qt libraries that each class "
"needs only. Of course you also need to link to the relevant qgis libraries "
"as required by your unit test."
msgstr "În continuare, trebuie să specificăm orice dependențe față de anumite biblioteci. Momentan, clasele au fost implementate cu o dependență catch-all QT_LIBRARIES, dar vom înlocui această clauză doar cu acele biblioteci Qt de care are nevoie fiecare clasă. Desigur, de asemenea, trebuie să conectați și bibliotecile QGIS relevante, în conformitate cu cerințele testului de unitate."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:445
msgid ""
"Next I tell cmake to install the tests to the same place as the qgis "
"binaries itself. This is something I plan to remove in the future so that "
"the tests can run directly from inside the source tree."
msgstr "În continuare vom spune lui cmake să instaleze testele în același loc cu cel al binarelor QGIS. Acest lucru îl vom elimina pe viitor, astfel încât testele să poată rula direct din interiorul arborelui sursă."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:472
msgid ""
"Finally the above uses ``ADD_TEST`` to register the test with cmake / ctest."
" Here is where the best magic happens - we register the class with ctest. If"
" you recall in the overview I gave in the beginning of this section, we are "
"using both QtTest and CTest together. To recap, QtTest adds a main method to"
" your test unit and handles calling your test methods within the class. It "
"also provides some macros like ``QVERIFY`` that you can use as to test for "
"failure of the tests using conditions. The output from a QtTest unit test is"
" an executable which you can run from the command line. However when you "
"have a suite of tests and you want to run each executable in turn, and "
"better yet integrate running tests into the build process, the CTest is what"
" we use."
msgstr "În cele din urmă s-a folosit ``ADD_TEST`` pentru a înregistra testul cu cmake / ctest. Aici este locul în care se întâmplă magia - înregistrarea clasei cu ctest. Dacă vă amintiți, în prezentarea generală de la începutul acestei secțiuni, folosim QtTest și CTest împreună. Recapitulând, QtTest adaugă o metodă principală unității de testare și gestionează apelurile metodelor de testare din cadrul clasei. De asemenea, furnizează unele comenzi macro, cum ar fi ``QVERIFY``, pe care le putem utiliza pentru rularea testelor folosind condiții. Rezultatul unității de testare QtTest este un executabil pe care îl putem rula din linia de comandă. Cu toate acestea, atunci când avem o suită de teste și dorim să rulăm individual fiecare executabil, și în plus, să integrăm testele de funcționare în procesul de compilare, folosim CTest."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:485
msgid "Building your unit test"
msgstr "Compilarea testului de unitate"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:487
msgid ""
"To build the unit test you need only to make sure that ``ENABLE_TESTS=true``"
" in the cmake configuration. There are two ways to do this:"
msgstr "Pentru a compila testul de unitate rewbuie doar să vă asigurați că ``ENABLE_TESTS = true`` în configurația cmake. Există două moduri de a face acest lucru:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:490
msgid ""
"Run ``ccmake ..`` ( or ``cmakesetup ..`` under windows) and interactively "
"set the ``ENABLE_TESTS`` flag to ``ON``."
msgstr "Rulați ``ccmake ..`` ( sau ``cmakesetup ..`` sub windows) și setați, în mod interactiv, fanionul ``ENABLE_TESTS`` pe ``ON``."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:492
msgid "Add a command line flag to cmake e.g. ``cmake -DENABLE_TESTS=true ..``"
msgstr "Adăugați o linie de comandă pentru fanion în cmake ex.: ``cmake -DENABLE_TESTS=true ..``"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:494
msgid ""
"Other than that, just build QGIS as per normal and the tests should build "
"too."
msgstr "La urmă, doar compilați normal QGIS, iar testele ar trebui să se compileze, la rândul lor."

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:498
msgid "Run your tests"
msgstr "Rularea testelor dumneavoastră"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:501
msgid ""
"The simplest way to run the tests is as part of your normal build process:"
msgstr "Cel mai simplu mod de a rula testele este ca parte a procesului normal de compilare:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:507
msgid ""
"The make test command will invoke CTest which will run each test that was "
"registered using the ADD_TEST CMake directive described above. Typical "
"output from make test will look like this:"
msgstr "Comanda de testare va invoca CTest, care va rula fiecare test care a fost înregistrat cu directiva ADD_TEST CMake, descrisă mai sus. Rezultatul tipic al testului va arăta astfel:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:527
msgid ""
"If a test fails, you can use the ctest command to examine more closely why "
"it failed. Use the ``-R`` option to specify a regex for which tests you want"
" to run and ``-V`` to get verbose output:"
msgstr "Dacă un test eșuează, puteți utiliza comanda ctest pentru a-i examina mai îndeaproape cauza. Utilizați ``opțiunea -R`` pentru a specifica un regex pentru testele pe care doriți să le rulați, și un `` -V`` pentru a obține o ieșire detaliată:"

#: ../../source/site/getinvolved/development/qgisdevelopersguide/unittesting.rst:571
msgid ""
"Well that concludes this section on writing unit tests in QGIS. We hope you "
"will get into the habit of writing test to test new functionality and to "
"check for regressions. Some aspects of the test system (in particular the "
"CMakeLists.txt parts) are still being worked on so that the testing "
"framework works in a truly platform way. I will update this document as "
"things progress."
msgstr "Aici se încheie secțiunea privitoare la scrierea testelor de unitate în QGIS. Sperăm că veți căpăta obișnuința de a scrie teste pentru verificarea noilor funcționalități și a regresiilor. Unele aspecte ale sistemului de testare (în special părțile din CMakeLists.txt) sunt încă în curs de finisare, astfel încât cadrul de testare funcționează ca o adevărată platformă. Vom actualiza acest document pe măsură ce lucrurile progresează."
